// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas
//modified by cody mcmahon

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
CHAR        ::= "char"
CLASS       ::= "class"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
IF          ::= "if"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
STATIC      ::= "static"
SUPER       ::= "super"
THIS        ::= "this"
TRUE        ::= "true"
VOID        ::= "void"
WHILE       ::= "while"

// more
ASSERT ::= "assert",
BREAK ::= "break",
BYTE ::= "byte",
CASE ::= "case",
CONST ::= "cost",
CONTINUE ::= "continue",
DOUBLE ::= "double",
ENUM ::= "enum",
FINAL ::= "final",
FINALLY ::= "finally",
FLOAT ::= "float",
FOR ::= "for",
GOTO ::= "goto",
IMPLEMENTS ::= "implements",
INTERFACE ::= "interface",
LONG ::= "long",
NATIVE ::= "native",
SHORT ::= "short",
STRICTFP ::= "strictfp",
SWITCH ::= "switch",
SYNCHRONIZED ::= "synchronized",
THROW ::= "throw",
THROWS ::= "throws",
TRANSIENT ::= "transient",
TRY ::= "try",
VOLATILE ::= "volatile",

// Operators
ASSIGN      ::= "="
EQUAL       ::= "=="
GT          ::= ">"
INC         ::= "++"
LAND        ::= "&&"
LE          ::= "<="
LNOT        ::= "!"
MINUS       ::= "-"
PLUS        ::= "+"
PLUS_ASSIGN ::= "+="
STAR        ::= "*"

// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"

//more

MODULUS ::= "%" 
BIT_AND ::= "&"
BIT_OR ::= "|"
BIT_XOR ::= "^"
BIT_COMP ::= "~"
LSHIFT ::= "<<"
RSHIFT ::= ">>"
ZRSHIFT ::= ">>>"
MODULUS_ASSIGN ::= "%="
LSHIFT_ASSIGN ::= "<<="
RSHIFT_ASSIGN ::= ">>="
BIT_AND_ASSIGN ::= "&="
BIT_XOR_ASSIGN ::= "^="
BIT_OR_ASSIGN ::= "|"
NOT_EQUAL ::= "!="
MULTIPLY_ASSIGN ::= "*="
DIVIDE_ASSIGN ::= "/="

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | "0x" | "0d" | "0b" | ("1"-"9") {"0"-"9"}
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"


